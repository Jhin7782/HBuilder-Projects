@charset "utf-8";
body {
    background-color: lightblue;
}

/*会被编译*/
//会被省略

//less中的变量
//声明变量的语法：@变量名:值;
@test_width: 300px;
.box {
    width: @test_width;
    height: @test_width;
    background-color: #fff;
    .border;
    //.border_02(5px);
    //.test_mixin;
}

//混合
.border {
    border: 1px solid red;
}

.box2 {
    .box;
    margin-left: 400px;
}

//带参的混合
.border_02(@border_width) {
    border: @border_width solid blue;
}

.test_mixin_02 {
    .border_02(5px);
}

//带默认值的混合
.border_03(@border_width: 10px) {
    border: @border_width solid yellow;
}

.test_mixin_03 {
    .border_03();
}

//混合的例子
.border_radius(@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

.radius_test {
    width: 100px;
    height: 40px;
    background-color: lightcoral;
    .border_radius(10px);
}

//匹配模式
.triangle1 {
    width: 0;
    height: 0;
    overflow: hidden;
    /*处理IE6最小高度问题*/
    border-width: 10px;
    border-bottom-width: 0px;
    border-color: red transparent transparent transparent;
    border-style: solid dashed dashed dashed;
}

.triangle2 {
    width: 0;
    height: 0;
    overflow: hidden;
    border-width: 10px;
    border-top-width: 0;
    border-color: transparent;
    border-bottom-color: blue;
    border-style: dashed;
    border-bottom-style: solid;
}

.triangle(top, @w: 50px, @c: yellow) {
    border-width: 0 @w @w @w;
    border-color: transparent transparent @c transparent;
    border-style: dashed dashed solid dashed;
}

.triangle(bottom, @w: 50px, @c: yellow) {
    border-width: @w @w 0 @w;
    border-color: @c transparent transparent transparent;
    border-style: solid dashed dashed dashed;
}

.triangle(left, @w: 50px, @c: yellow) {
    border-width: @w @w @w 0;
    border-color: transparent @c transparent transparent;
    border-style: dashed solid dashed dashed;
}

.triangle(right, @w: 50px, @c: yellow) {
    border-width: @w 0 @w @w;
    border-color: transparent transparent transparent @c;
    border-style: dashed dashed dashed solid;
}

.triangle(@_, @w: 50px, @c: yellow) {
    width: 0;
    height: 0;
    overflow: hidden;
}

.triangle3 {
    .triangle(right, 100px);
}

//匹配模式——定位
.pos(r) {
    position: relative;
}

.pos(a) {
    position: absolute;
}

.pos(f) {
    position: fixed;
}

.position {
    width: 200px;
    height: 200px;
    background-color: crimson;
    .pos(r);
}

//运算
@test_01: 300px;
.box3 {
    width: @test_01 + 20 * 5;
    color: #ccc - 10;
}

//嵌套规则
//对伪类使用： &-hover或focus
//对连接的使用： -&-item
.list {
    width: 600px;
    margin: 30px auto;
    padding: 0;
    list-style: none;
    li {
        height: 30px;
        line-height: 30px;
        background-color: pink;
        margin-bottom: 5px;
        padding: 0 10px;
    }
    a {
        float: left;
        &:hover {
            color: red;
        }
    }
    span {
        float: right;
    }
}

//arguments变量
//包含了所有传递进来的参数，如果不想单独处理每一个参数的话就可以这样写
.border_arg(@w: 30px, @c: red, @xx: solid) {
    border: @arguments;
}

.test_arguments {
    .border_arg(40px);
}

//避免编译
.test_03 {
    width: ~'calc(300px - 30px)';
}

//!important关键字
//会为混合所带来的所有样式，添加上!important
.test_important {
    .border_radius() !important;
}
